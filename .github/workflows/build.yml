name: Container Image Build
on:
  push:

  # Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  TEST_TAG: test

jobs:
  Black-Format:
    name: runner / black formatter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: psf/black@stable
        with:
          options: "--check --verbose --line-length 120"
          src: "api-implementation/src"
  Image-Build:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    strategy:
      matrix:
        service: [coordinator]
        # TEMPORARY TEST
        # service: [coordinator, dcv_checker, caa_checker]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Uses the `docker/login-action` action to log in to the Container registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Authenticate to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.service }}
          tags: |
            # set timestamp tag
            type=raw,value={{date 'YYYYMMDD-HHmmss'}}
            # set branch-timestamp tag
            type=raw,value={{github.ref}}-{{date 'YYYYMMDD-HHmmss'}}
            # set latest tag for default branch
            type=raw,value=latest,enable={{is_default_branch}}
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index

      - name: Get Python Version
        id: python-version
        # read the ${{ matrix.service }}/.python-version file and load the version into a variable that is used in the next step
        run: echo "PYTHON_VERSION=$(cat api-implementation/src/mpic_${{ matrix.service }}_service/.python-version)" >> $GITHUB_OUTPUT
        # the variable is now available as $PYTHON_VERSION

      - name: Get core version from pyproject.toml
        id: openMpicCoreVersion
        uses: mikefarah/yq@master
        with:
          cmd: yq -oy '.project.dependencies.[] | select(test("^open-mpic-core")) | split("==")[1]' api-implementation/pyproject.toml
      - name: Print Core Version
        run: echo "${{ steps.openMpicCoreVersion.outputs.result }}"
      # This step sets up QEMU for cross-platform builds.
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # This step sets up Docker Buildx for multi-platform builds.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and export to Docker
        uses: docker/build-push-action@v6
        with:
          load: true
          context: api-implementation
          build-args: |
            PYTHON_VERSION=${{ steps.python-version.outputs.PYTHON_VERSION }}
            SERVICE_PATH=src/mpic_${{ matrix.service }}_service
          file: api-implementation/Dockerfile
          tags: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.service }}:${{ env.TEST_TAG }}
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.service }}:${{ env.TEST_TAG }}
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"
      - name: Print labels
        run: echo "${{ steps.meta.outputs.labels }}"
      - name: Build and push image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: api-implementation
          platforms: linux/amd64,linux/arm64
          build-args: |
            PYTHON_VERSION=${{ steps.python-version.outputs.PYTHON_VERSION }}
            SERVICE_PATH=src/mpic_${{ matrix.service }}_service
          file: api-implementation/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # outputs: type=image,name=target,annotation-index.org.opencontainers.image.description=openMPIC ${{ matrix.service }} service with OpenMpicCore ${{ steps.openMpicCoreVersion.outputs.result }}
          outputs: type=image,name=target,annotation-index.org.opencontainers.image.description=${{ steps.meta.outputs.annotations }}

      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see "[Using artifact attestations](https://docs.github.com/en/actions/security-for-github-actions/using-artifact-attestations)."
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.service }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  # Image-Build-Unbound:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     packages: write
  #     attestations: write
  #     id-token: write
  #   strategy:
  #     matrix:
  #       service: [unbound]
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #     # Uses the `docker/login-action` action to log in to the Container registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
  #     - name: Authenticate to GitHub Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
  #     - name: Extract metadata (tags, labels) for Docker
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.service }}
  #         tags: |
  #           # set timestamp tag
  #           type=raw,value={{date 'YYYYMMDD-HHmmss'}}
  #           # set latest tag for default branch
  #           type=raw,value=latest,enable={{is_default_branch}}

  #     # This step sets up QEMU for cross-platform builds.
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     # This step sets up Docker Buildx for multi-platform builds.
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #     # Built unbound image.
  #     # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
  #     # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
  #     # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
  #     - name: Build and export to Docker
  #       uses: docker/build-push-action@v6
  #       with:
  #         load: true
  #         context: unbound
  #         file: unbound/Dockerfile
  #         tags: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.service }}:${{ env.TEST_TAG }}
  #     - name: Run Trivy vulnerability scanner
  #       uses: aquasecurity/trivy-action@0.28.0
  #       with:
  #         image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.service }}:${{ env.TEST_TAG }}
  #         format: "table"
  #         exit-code: "1"
  #         ignore-unfixed: true
  #         vuln-type: "os,library"
  #         severity: "CRITICAL,HIGH"

  #     - name: Build and push image
  #       id: push
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: unbound
  #         platforms: linux/amd64,linux/arm64
  #         file: unbound/Dockerfile
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}

  #     # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see "[Using artifact attestations](https://docs.github.com/en/actions/security-for-github-actions/using-artifact-attestations)."
  #     - name: Generate artifact attestation
  #       uses: actions/attest-build-provenance@v1
  #       with:
  #         subject-name: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.service }}
  #         subject-digest: ${{ steps.push.outputs.digest }}
  #         push-to-registry: true
