name: Container Image Build
on:
  push:

  # Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  TEST_TAG: test

jobs:
  Black-Format:
    name: runner / black formatter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: psf/black@stable
        with:
          options: "--check --verbose --line-length 120"
          src: "api-implementation/src"
  shared-tags:
    name: Shared Tags
    runs-on: ubuntu-latest
    outputs:
      branch-name: ${{ steps.branch-name.outputs.BRANCH_NAME }}
      timestamp: ${{ steps.timestamp.outputs.TIMESTAMP }}
      legacy-timestamp: ${{ steps.legacy-timestamp.outputs.LEGACY-TIMESTAMP }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate sanitized branch name for tag
        id: branch-name
        # This step generates a sanitized branch name for tagging the Docker image. It replaces hyphens with dots in the branch name.
        run: echo "BRANCH_NAME=${GITHUB_REF_NAME//-/.}" >> "$GITHUB_OUTPUT"

      - name: Generate legacy-timestamp format in shared output for synchronization with matrix
        id: legacy-timestamp
        # This is to support existing tags that are already in the legacy format. It generates a timestamp in a legacy format for tagging the Docker images.
        run: echo "LEGACY-TIMESTAMP=$(date -u +'%Y%m%d-%H%M%S')" >> "$GITHUB_OUTPUT"

      - name: Generate timestamp for tag in ISO 8601-1:2019 basic format
        id: timestamp
        # This step generates a timestamp in ISO 8601-1:2019 format for tagging the Docker image.
        run: echo "TIMESTAMP=$(date -u +'%Y%m%dT%H%M%SZ')" >> "$GITHUB_OUTPUT"

      - name: Tags Summary
        run: |
          echo '### Generated Image Tags 📦' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
          echo "- Branch Name: ${{ steps.branch-name.outputs.BRANCH_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- Timestamp: ${{ steps.timestamp.outputs.TIMESTAMP }}" >> $GITHUB_STEP_SUMMARY
          echo "- Legacy Timestamp: ${{ steps.legacy-timestamp.outputs.LEGACY-TIMESTAMP }}" >> $GITHUB_STEP_SUMMARY

  Image-Build:
    runs-on: ubuntu-latest
    needs: [shared-tags]
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    strategy:
      matrix:
        service: [coordinator, dcv_checker, caa_checker]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # This step uses the `docker/login-action` action to log in to the Container registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Authenticate to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Python Version
        id: python-version
        # read the ${{ matrix.service }}/.python-version file and load the version into a variable that is used in the next step
        run: echo "PYTHON_VERSION=$(cat api-implementation/src/mpic_${{ matrix.service }}_service/.python-version)" >> $GITHUB_OUTPUT
        # the variable is now available as $PYTHON_VERSION

      - name: Get core version from pyproject.toml
        id: openMpicCoreVersion
        uses: mikefarah/yq@master
        with:
          cmd: yq -oy '.project.dependencies.[] | select(test("^open-mpic-core")) | split("==")[1]' api-implementation/pyproject.toml

      - name: Get OpenMPIC Spec Version from pyproject.toml
        id: openMpicSpecVersion
        uses: mikefarah/yq@master
        with:
          cmd: yq -oy '.tool.api.spec_version' api-implementation/pyproject.toml

      - name: Prepare image description
        id: image-desc
        run: |
          # Keep the single-line description for Docker annotations
          DESCRIPTION="OpenMPIC ${{ matrix.service }} service | OpenMpicCore Version: ${{ steps.openMpicCoreVersion.outputs.result }} | OpenMPIC Spec Version: ${{ steps.openMpicSpecVersion.outputs.result }} | Built on: ${{ needs.shared-tags.outputs.timestamp }} | Branch: ${{ needs.shared-tags.outputs.branch-name }}"
          echo "DESC=$DESCRIPTION" >> $GITHUB_OUTPUT

          # Add a nicely formatted description to the job summary
          echo "### 🐳 Image Description" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Service:** OpenMPIC ${{ matrix.service }}" >> $GITHUB_STEP_SUMMARY
          echo "**OpenMPIC Core Version:** ${{ steps.openMpicCoreVersion.outputs.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**OpenMPIC Spec Version:** ${{ steps.openMpicSpecVersion.outputs.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build Time:** ${{ needs.shared-tags.outputs.timestamp }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ needs.shared-tags.outputs.branch-name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.service }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.service }}
          tags: |
            # set timestamp tag
            type=raw,value=${{ needs.shared-tags.outputs.legacy-timestamp }}
            # set branch-timestamp tag
            type=raw,value=${{ needs.shared-tags.outputs.branch-name }}-${{ needs.shared-tags.outputs.timestamp }}
            # set latest tag for default branch
            type=raw,value=latest,enable={{is_default_branch}}
          annotations: |
            org.opencontainers.image.description=${{ steps.image-desc.outputs.DESC }}
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index
          DOCKER_METADATA_SET_OUTPUT_ENV: true

      # This step sets up QEMU for cross-platform builds.
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # This step sets up Docker Buildx for multi-platform builds.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and export to Docker
        uses: docker/build-push-action@v6
        with:
          load: true
          context: api-implementation
          build-args: |
            PYTHON_VERSION=${{ steps.python-version.outputs.PYTHON_VERSION }}
            SERVICE_PATH=src/mpic_${{ matrix.service }}_service
          file: api-implementation/Dockerfile
          tags: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.service }}:${{ env.TEST_TAG }}
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.service }}:${{ env.TEST_TAG }}
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"
      - name: Print labels
        run: echo "${{ steps.meta.outputs.labels }}"
      - name: Build and push image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: api-implementation
          platforms: linux/amd64,linux/arm64
          build-args: |
            PYTHON_VERSION=${{ steps.python-version.outputs.PYTHON_VERSION }}
            SERVICE_PATH=src/mpic_${{ matrix.service }}_service
          file: api-implementation/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          annotations: ${{ steps.meta.outputs.annotations }}

      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see "[Using artifact attestations](https://docs.github.com/en/actions/security-for-github-actions/using-artifact-attestations)."
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.service }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Add container registry links to summary
        if: success() && steps.push.outcome == 'success'
        id: package-id
        run: |
          # Wait briefly for the package to be available in the API
          sleep 10

          # Tag to find (use the branch-timestamp tag as it's unique)
          TAG="${{ needs.shared-tags.outputs.branch-name }}-${{ needs.shared-tags.outputs.timestamp }}"

          # Try to get the package version ID first
          echo "Attempting to find exact package version ID..."
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/orgs/${{ github.repository_owner }}/packages/container/${{ matrix.service }}/versions")

          # Parse the response to find the package version with our tag
          PACKAGE_VERSION_ID=$(echo "$RESPONSE" | jq -r '.[] | select(.metadata.container.tags[] | contains("'"$TAG"'")) | .id')

          # Update the step summary with the appropriate links based on what we found
          echo "### 📦 Container Registry Links" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -n "$PACKAGE_VERSION_ID" ]; then
            echo "Found package version ID: $PACKAGE_VERSION_ID"
            echo "PACKAGE_VERSION_ID=$PACKAGE_VERSION_ID" >> $GITHUB_OUTPUT
            
            # Direct link with specific package version ID AND tag
            echo "- [📋 Package Version Link](https://github.com/${{ github.repository_owner }}/open-mpic-containers/pkgs/container/${{ matrix.service }}/$PACKAGE_VERSION_ID?tag=$TAG)" >> $GITHUB_STEP_SUMMARY
          else
            echo "Note: Could not determine exact package version ID."
            
            # Add the main container page as fallback
            echo "- [📋 Container Registry](https://github.com/${{ github.repository_owner }}/open-mpic-containers/pkgs/container/${{ matrix.service }})" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY

  Image-Build-Unbound:
    runs-on: ubuntu-latest
    needs: [shared-tags]
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Uses the `docker/login-action` action to log in to the Container registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Authenticate to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/unbound
          tags: |
            # set timestamp tag
            type=raw,value=${{ needs.shared-tags.outputs.legacy-timestamp }}
            # set branch-timestamp tag
            type=raw,value=${{ needs.shared-tags.outputs.branch-name }}-${{ needs.shared-tags.outputs.timestamp }}
            # set latest tag for default branch
            type=raw,value=latest,enable={{is_default_branch}}

      # This step sets up QEMU for cross-platform builds.
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # This step sets up Docker Buildx for multi-platform builds.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # Built unbound image.
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and export to Docker
        uses: docker/build-push-action@v6
        with:
          load: true
          context: unbound
          file: unbound/Dockerfile
          tags: ${{ env.REGISTRY }}/${{ github.repository_owner }}/unbound:${{ env.TEST_TAG }}
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/unbound:${{ env.TEST_TAG }}
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

      - name: Build and push image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: unbound
          platforms: linux/amd64,linux/arm64
          file: unbound/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see "[Using artifact attestations](https://docs.github.com/en/actions/security-for-github-actions/using-artifact-attestations)."
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ github.repository_owner }}/unbound
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Add container registry links to summary
        if: success() && steps.push.outcome == 'success'
        id: package-id
        run: |
          # Wait briefly for the package to be available in the API
          sleep 10

          # Tag to find (use the branch-timestamp tag as it's unique)
          TAG="${{ needs.shared-tags.outputs.branch-name }}-${{ needs.shared-tags.outputs.timestamp }}"

          # Try to get the package version ID first
          echo "Attempting to find exact package version ID..."
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/orgs/${{ github.repository_owner }}/packages/container/unbound/versions")

          # Parse the response to find the package version with our tag
          PACKAGE_VERSION_ID=$(echo "$RESPONSE" | jq -r '.[] | select(.metadata.container.tags[] | contains("'"$TAG"'")) | .id')

          # Update the step summary with the appropriate links based on what we found
          echo "### 📦 Container Registry Links" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -n "$PACKAGE_VERSION_ID" ]; then
            echo "Found package version ID: $PACKAGE_VERSION_ID"
            echo "PACKAGE_VERSION_ID=$PACKAGE_VERSION_ID" >> $GITHUB_OUTPUT
            
            # Direct link with specific package version ID AND tag
            echo "- [📋 Package Version Link](https://github.com/${{ github.repository_owner }}/open-mpic-containers/pkgs/container/unbound/$PACKAGE_VERSION_ID?tag=$TAG)" >> $GITHUB_STEP_SUMMARY
          else
            echo "Note: Could not determine exact package version ID."
            
            # Add the main container page as fallback
            echo "- [📋 Container Registry](https://github.com/${{ github.repository_owner }}/open-mpic-containers/pkgs/container/unbound)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
