[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

[project]
name = "open-mpic-restapi-server"
version = "0.4.0"
description = 'MPIC standard API implementation leveraging FastAPI and Docker.'
requires-python = ">=3.11"
license = "MIT"
keywords = []
authors = [
    { name = "Henry Birge-Lee", email = "henrybirgelee@gmail.com" },
    { name = "Grace Cimaszewski", email = "ghc2@princeton.edu" },
    { name = "Dmitry Sharkov", email = "dmitry.sharkov@sectigo.com" },
    { name = "Alan Hanafy", email = "alan.hanafy@sectigo.com" }
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
    "pyyaml==6.0.1",
    "requests>=2.32.3",
    "dnspython==2.6.1",
    "pydantic==2.8.2",
    "fastapi[standard]>=0.115.0,<0.116.0",
#    "open-mpic-core @ git+https://github.com/open-mpic/open-mpic-core-python.git@birgelee-dcv-caa-perspective-code-response",
    "open-mpic-core==5.3.0",
    "aiohttp==3.11.11",
    "uvicorn>=0.22.0,<0.23.0",
    "black==24.8.0",
]

[project.optional-dependencies]
test = [
    "pytest==8.2.2",
    "pytest-cov==5.0.0",
    "pytest-mock==3.14.0",
    "pytest-html==4.1.1",
    "pytest-asyncio==0.25.1",
]

[project.urls]
Documentation = "https://github.com/open-mpic/open-mpic-restapi-server"
Issues = "https://github.com/open-mpic/open-mpic-restapi-server/issues"
Source = "https://github.com/open-mpic/open-mpic-restapi-server"

[tool.api]
spec_version = "3.0.0"
spec_repository = "https://github.com/open-mpic/open-mpic-specification"

[tool.hatch]
build.sources = ["src"]
build.targets.wheel.packages = ["src"]

[tool.hatch.envs.default]
skip-install = false
type="virtual"
path="../venv"

[tool.hatch.envs.default.env-vars]
PIP_INDEX_URL = "https://pypi.org/simple/"
PIP_VERBOSE = "1"

[tool.hatch.envs.production]
dev-mode=false

[tool.hatch.envs.test]
skip-install = false
features = [
    "test",
]
installer = "pip"

[tool.hatch.envs.test.scripts]
pre-install = "python -m ensurepip"
unit = "pytest"
unit-html = "pytest --html=testreports/index.html" # generate html report (warning: uses an aging plugin, 11-2023)
integration = "pytest tests/integration"
coverage = "pytest --cov=src --cov-report=term-missing --cov-report=html"

[tool.hatch.envs.hatch-test]
default-args = ["tests/unit"]
randomize = true

[tool.pytest.ini_options]
pythonpath = [
    "src", "tests"
]
testpaths = [
    "tests/unit"
]
python_functions = [
    "*_should_*",
]
markers = [
    "integration: mark test as an integration test",
    "unit: mark test as a unit test",  # optional
]
addopts = [
    "--import-mode=prepend",  # explicit default, as the tests rely on it for proper import resolution
]
asyncio_mode = "auto"  # defaults to "strict"
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
source = [
    "src"
]

[tool.coverage.report]
include_namespace_packages = true
omit = [
    "*/src/*/__about__.py",
]

[tool.black]
line-length = 120
